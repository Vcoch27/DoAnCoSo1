package GUI.ForCommunity.KhungHienThiCommunity;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;

import GUI.ForCommunity.ElementForCommunity.ElementForPost.ElementComment;

import java.awt.Font;
import java.awt.Image;

import javax.imageio.ImageIO;
import javax.swing.JTextPane;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

public class FramePostFull extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTextField tfComment;
	private JTextArea textArea;

	private JLabel totalLabel;
	private int totalCount = 999;
	private int forVote = 0;
	private JLabel increase;
	private JLabel reduce;
	private ImageIcon scalesVoteUp = new ImageIcon(
			ImageIO.read(new File("asset//img//voteUp.png")).getScaledInstance(45, 45, Image.SCALE_SMOOTH));
	private ImageIcon scalesVoteDown = new ImageIcon(
			ImageIO.read(new File("asset//img//voteDown.png")).getScaledInstance(45, 45, Image.SCALE_SMOOTH));
	private ImageIcon scalesSelectVoteUp = new ImageIcon(
			ImageIO.read(new File("asset//img//selectVoteUp.png")).getScaledInstance(85, 130, Image.SCALE_SMOOTH));
	private ImageIcon scalesSelectVoteDown = new ImageIcon(
			ImageIO.read(new File("asset//img//selectVoteDown.png")).getScaledInstance(85, 130, Image.SCALE_SMOOTH));
	private JLabel avatar;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JPanel panel_1;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JPanel panelComment;
	private JPanel seeMore;
	

	public static void main(String[] args) {
		EventQueue.invokeLater(() -> {
			try {
				FramePostFull frame = new FramePostFull();
				frame.setVisible(true);
			} catch (Exception e) {
				e.printStackTrace();
			}
		});
	}

	public FramePostFull() throws IOException, BadLocationException {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 990, 859);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

//        PaneMiniPost miniPost = new PaneMiniPost();
//        miniPost.setBounds(10, 10, 980, 330); 
//        contentPane.add(miniPost); 

//        miniPost.hideFullCommentLabel();

		JPanel panel = new JPanel();
		panel.setBackground(new Color(212, 212, 212));
		panel.setBounds(0, 317, 974, 55);
		contentPane.add(panel);
		panel.setLayout(null);

		BufferedImage myIconU = ImageIO.read(new File("asset//img//account.png"));
		Image imgIconU = myIconU.getScaledInstance(45, 45, Image.SCALE_SMOOTH);
		ImageIcon scalesU = new ImageIcon(imgIconU);
		JLabel lblNewLabel = new JLabel(scalesU);
		lblNewLabel.setBounds(10, 7, 41, 40);
		panel.add(lblNewLabel);

		tfComment = new JTextField();
		tfComment.setFont(new Font("Tahoma", Font.PLAIN, 14));
		tfComment.setBounds(55, 10, 854, 35);
		panel.add(tfComment);
		tfComment.setColumns(10);
		
		tfComment.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        try {
		            sentComment();
		        } catch (IOException | BadLocationException e1) {
		            e1.printStackTrace();
		        }
		    }
		});
		
		BufferedImage myIconSent = ImageIO.read(new File("asset//img//sentCmt.png"));
		Image imgIconSent = myIconSent.getScaledInstance(50, 50, Image.SCALE_SMOOTH);
		ImageIcon scalesSent = new ImageIcon(imgIconSent);
		lblNewLabel_4 = new JLabel(scalesSent);
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				try {
					sentComment();
				} catch (IOException | BadLocationException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}

		});
		lblNewLabel_4.setBounds(909, 3, 46, 45);
		panel.add(lblNewLabel_4);
		setResizable(false);
		JPanel panelUserPost = new JPanel();
		panelUserPost.setBounds(0, 0, 972, 45);
		contentPane.add(panelUserPost);
		panelUserPost.setLayout(null);

		BufferedImage myIconAvt = ImageIO.read(new File("asset//img//account.png"));
		Image imgIconAvt = myIconAvt.getScaledInstance(45, 45, Image.SCALE_SMOOTH);
		ImageIcon scalesAvt = new ImageIcon(imgIconAvt);
		avatar = new JLabel(scalesAvt);
		avatar.setBounds(10, 0, 45, 45);
		panelUserPost.add(avatar);

		lblNewLabel_1 = new JLabel("Tr·∫ßn ƒê·ª©c Ho√†ng");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel_1.setBounds(68, 6, 203, 21);
		panelUserPost.add(lblNewLabel_1);

		Date currentDate = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String formattedDateTime = formatter.format(currentDate);
		lblNewLabel_2 = new JLabel(formattedDateTime);
		lblNewLabel_2.setFont(new Font("Tahoma", Font.PLAIN, 11));
		lblNewLabel_2.setBounds(68, 28, 159, 14);
		panelUserPost.add(lblNewLabel_2);

		panel_1 = new JPanel();
		panel_1.setBackground(new Color(255, 255, 255));
		panel_1.setBounds(420, 9, 548, 28);
		panelUserPost.add(panel_1);

		lblNewLabel_3 = new JLabel("NH·∫¨T K√ç H√ìA H·ªåC C·ª¶A C√ìC - DAY 1");
		lblNewLabel_3.setFont(new Font("Arial", Font.BOLD, 19));
		panel_1.add(lblNewLabel_3);

		JPanel mainContent = new JPanel();
		mainContent.setBackground(new Color(170, 170, 170));
		mainContent.setLayout(null);
		mainContent.setBounds(0, 48, 980, 270);
		contentPane.add(mainContent);

		totalLabel = new JLabel("999");
		totalLabel.setHorizontalAlignment(SwingConstants.CENTER);
		totalLabel.setFont(new Font("Tahoma", Font.BOLD, 15));
		totalLabel.setBounds(65, 219, 45, 46);
		mainContent.add(totalLabel);

		increase = new JLabel(scalesVoteUp);
		increase.setBounds(10, 219, 45, 45);
		mainContent.add(increase);

		reduce = new JLabel(scalesVoteDown);
		reduce.setBounds(123, 220, 45, 45);
		mainContent.add(reduce);

		reduce.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				super.mouseClicked(e);
				reduceTotal();
			}
		});

		increase.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				super.mouseClicked(e);
				increaseTotal();
			}
		});

		JTextPane textPane = new JTextPane();
		textPane.setText(
				"T√îI ƒê√É TR.·∫¶Y TR.·∫¨T V√å TI·∫æNG ANH V√Ä ƒê√ÇY C√ÅC TIP T·ª∞ H·ªåC C·ª¶A T√îI - M·ªòT √îNG DEV QU√àN M·∫§T G·ªêC üëì\r\n______\r\nAi bi·∫øt hay gi·ªèi c√°i g√¨ th√¨ c≈©ng ƒëi t·ª´ kh√¥ng bi·∫øt m√† l√™n. Tui c≈©ng z·∫≠y nh∆∞ng ƒë∆∞·ª£c c√°i ch·ªãu kh√≥ n√™n ti·∫øng Anh gi·ªù c≈©ng ƒë·ªß x√†i n√™n share l·∫°i cho anh em v√†i tip x∆∞∆°ng m.√°u, mong l√† gi√∫p √≠ch cho anh em ƒë∆∞·ª£c t√≠\n   #1: H·ªåC CƒÇN B·∫¢N üìù\r\nM·∫•t g·ªëc th√¨ h·ªçc l·∫°i g·ªëc ch·ª© sao gi·ªù ƒë√∫ng ko :)) Ph·∫ßn ƒë√¥ng c√°c b·∫°n kh·ªï s·ªü v·ªõi ti·∫øng Anh ·ªü ƒê·∫°i h·ªçc l√† v√¨ c√°c b·∫°n m·∫•t cƒÉn b·∫£n t·ª´ khi c√≤n l√† h·ªçc sinh.\n#2: ƒê·ª™NG ƒê·ªÇ TI·∫æNG ANH TH√ÄNH NI·ªÄM ƒê.AU üò©\r\nNgo√†i h·ªçc ch·ªß ƒë·ªông th√¨ tui c≈©ng ƒë·ªÉ m√¨nh ti·∫øp x√∫c b·ªã ƒë·ªông v·ªõi ti·∫øng Anh nhi·ªÅu h∆°n");
		textPane.setFont(new Font("Tahoma", Font.PLAIN, 17));
		textPane.setEditable(false);
		textPane.setBounds(0, 3, 978, 213);
		mainContent.add(textPane);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(0, 374, 976, 454);
		getContentPane().add(scrollPane);
		
		panelComment = new JPanel();
		
		BoxLayout boxLayout = new BoxLayout(panelComment, BoxLayout.Y_AXIS);
		panelComment.setLayout(boxLayout);
		scrollPane.setViewportView(panelComment);

		

		seeMore = new JPanel();
		seeMore.setPreferredSize(new Dimension(980, 49));
		seeMore.setLayout(null);
		seeMore.setBackground(new Color(255, 0, 255));
		BufferedImage myMore = ImageIO.read(new File("asset//img//downToSeeMore.png"));
		Image imgMore = myMore.getScaledInstance(80, 45, Image.SCALE_SMOOTH);
		ImageIcon scalesMore = new ImageIcon(imgMore);
		JLabel lbforSeeMore = new JLabel(scalesMore);
		seeMore.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				try {
					seeMore();
				} catch (IOException | BadLocationException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		lbforSeeMore.setBounds(450, 2, 80, 45);
		seeMore.add(lbforSeeMore);
		
		
		for (int i = 0; i <3 ; i++) {
			if (i == 10) {
				panelComment.add(seeMore);
				break;
			}
			ElementComment minipost = new ElementComment("ƒê·ªÉ t√≠nh to√°n s·ªë h√†ng c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã ƒëo·∫°n vƒÉn b·∫£n tr√™n JTextPane v√† ƒëi·ªÅu ch·ªânh chi·ªÅu cao c·ªßa n√≥, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng FontMetrics ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ k√≠ch th∆∞·ªõc c·ªßa font v√† t√≠nh to√°n s·ªë h√†ng d·ª±a tr√™n ƒë·ªô d√†i c·ªßa ƒëo·∫°n vƒÉn b·∫£n v√† chi·ªÅu r·ªông c·ªßa JTextPane. D∆∞·ªõi ƒë√¢y l√† m·ªôt v√≠ d·ª• v·ªÅ c√°ch l√†m ƒëi·ªÅu n√†y trong Java:");
			panelComment.add(minipost);
			Component rigidArea = Box.createRigidArea(new Dimension(0, 10));
			panelComment.add(rigidArea);
			

		}
//		Component rigidArea = Box.createRigidArea(new Dimension(0, 200));
//		panelComment.add(rigidArea,0);
//		panelComment.setBounds(0, 374, 976, 388);

//        JLabel send = new JLabel("");
//        send.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                super.mouseClicked(e);
//                String name = miniPost.getName();
//                String comment = tfComment.getText().trim();
//                if (!comment.isEmpty()) {
////                    miniPost.addComment(name + ": " + comment);
//                    tfComment.setText("");
//                }
//            }
//        });
//
//        send.setIcon(new ImageIcon("C:\\Java\\DACS-1\\send.png"));
//        send.setBounds(929, 10, 41, 35);
//        panel.add(send);
	}

	private void increaseTotal() {
		if (forVote == 0 || forVote == -1) {
			totalCount = (++totalCount) - forVote;
			totalLabel.setText(Integer.toString(totalCount));
			forVote = 1;
			increase.setIcon(scalesSelectVoteUp);
			reduce.setIcon(scalesVoteDown);
		} else {
			totalLabel.setText(Integer.toString(--totalCount));
			forVote = 0;
			increase.setIcon(scalesVoteUp);
		}
//		else if(forVote==1) {
//			totalCount++;
//			totalLabel.setText(Integer.toString(totalCount));
//			forVote = 0;
//		}

	}

	private void reduceTotal() {
//		if (totalCount > 0) {
//			totalCount--;
//			totalLabel.setText(Integer.toString(totalCount));
//			forVote = -1;
//		}
		if (forVote == 0 || forVote == 1) {
			totalCount = totalCount - 1 - forVote;
			totalLabel.setText(Integer.toString(totalCount));
			forVote = -1;
			increase.setIcon(scalesVoteUp);
			reduce.setIcon(scalesSelectVoteDown);
		} else {
			totalLabel.setText(Integer.toString(++totalCount));
			forVote = 0;
			reduce.setIcon(scalesVoteDown);
		}
	}
	private void seeMore() throws IOException, BadLocationException {

		panelComment.remove(seeMore);
		for (int i = 0; i < 2; i++) {
			ElementComment minipost = new ElementComment("\"ƒê·ªÉ t√≠nh to√°n s·ªë h√†ng c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã ƒëo·∫°n vƒÉn b·∫£n tr√™n JTextPane v√† ƒëi·ªÅu ch·ªânh chi·ªÅu cao c·ªßa n√≥, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng FontMetrics ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ k√≠ch th∆∞·ªõc c·ªßa font v√† t√≠nh to√°n s·ªë h√†ng d·ª±a tr√™n ƒë·ªô d√†i c·ªßa ƒëo·∫°n vƒÉn b·∫£n v√† chi·ªÅu r·ªông c·ªßa JTextPane. D∆∞·ªõi ƒë√¢y l√† m·ªôt v√≠ d·ª• v·ªÅ c√°ch l√†m ƒëi·ªÅu n√†y trong Java:\"");
			panelComment.add(minipost);
			Component rigidArea = Box.createRigidArea(new Dimension(0, 40));
			panelComment.add(rigidArea);
		}
		panelComment.add(seeMore);
	}

	private void sentComment() throws IOException, BadLocationException {
		String text = tfComment.getText().trim();
		if(!text.equals("")) {
			ElementComment cmt = new ElementComment(text);
			panelComment.add(cmt,0);
			Component rigidArea = Box.createRigidArea(new Dimension(0, 10));
			panelComment.add(rigidArea,1);
			tfComment.setText("");
		}
	}
}
